{"version":3,"sources":["js/02-timer.js"],"names":["refs","startBtn","document","querySelector","days","hours","minutes","seconds","CountdownTimer","constructor","onTick","intervalID","active","init","time","convertMs","start","isActive","startTime","Date","now","setInterval","currentTime","deltaTime","stop","clearInterval","ms","String","Math","floor","hour","padStart","addLeadingZero","minute","second","value","timer","updateClockface","textContent","addEventListener","bind"],"mappings":";AAAA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,sBACjCC,KAAMF,SAASC,cAAc,eAC7BE,MAAOH,SAASC,cAAc,gBAC9BG,QAASJ,SAASC,cAAc,kBAChCI,QAASL,SAASC,cAAc,mBAElC,MAAMK,EACJC,aAAY,OAAEC,IACPC,KAAAA,WAAa,KACbC,KAAAA,QAAS,EACTF,KAAAA,OAASA,EAETG,KAAAA,OAGPA,OACQC,MAAAA,EAAO,KAAKC,UAAU,GACvBL,KAAAA,OAAOI,GAGdE,QACM,GAAA,KAAKC,SACP,OAEIC,MAAAA,EAAYC,KAAKC,MAClBH,KAAAA,UAAW,EAEXN,KAAAA,WAAaU,YAAY,KACtBC,MACAC,EADcJ,KAAKC,MACOF,EAC1BJ,EAAO,KAAKC,UAAUQ,GACvBb,KAAAA,OAAOI,IAEX,KAGLU,OACEC,cAAc,KAAKd,YACdM,KAAAA,UAAW,EACVH,MAAAA,EAAO,KAAKC,UAAU,GACvBL,KAAAA,OAAOI,GAGdC,UAAUW,GAgBD,MAAA,CAAEtB,KARIuB,OAAOC,KAAKC,MAAMH,EAHnBI,QAG8BC,SAAS,EAAG,KAQvC1B,MAND,KAAK2B,eAAeJ,KAAKC,MAAOH,EALlCI,MADCG,OAYS3B,QAJN,KAAK0B,eAAeJ,KAAKC,MAAQH,EAPrCI,MADCG,KADEC,MAagB3B,QAFf,KAAKyB,eAAeJ,KAAKC,MAASH,EATtCI,MADCG,KADEC,IADA,OAiBjBF,eAAeG,GACNR,OAAAA,OAAOQ,GAAOJ,SAAS,EAAG,MAIrC,MAAMK,EAAQ,IAAI5B,EAAe,CAC/BE,OAAQ2B,IAKV,SAASA,GAAgB,KAAEjC,EAAF,MAAQC,EAAR,QAAeC,EAAf,QAAwBC,IAC/CP,EAAKI,KAAKkC,eAAiBlC,IAC3BJ,EAAKK,MAAMiC,eAAiBjC,IAC5BL,EAAKM,QAAQgC,eAAiBhC,IAC9BN,EAAKO,QAAQ+B,eAAiB/B,IANhCP,EAAKC,SAASsC,iBAAiB,QAASH,EAAMpB,MAAMwB,KAAKJ","file":"02-timer.f51f08cc.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  startBtn: document.querySelector('button[data-start]'),\n  days: document.querySelector('[data-days]'),\n  hours: document.querySelector('[data-hours]'),\n  minutes: document.querySelector('[data-minutes]'),\n  seconds: document.querySelector('[data-seconds]'),\n};\nclass CountdownTimer {\n  constructor({ onTick }) {\n    this.intervalID = null;\n    this.active = false;\n    this.onTick = onTick;\n\n    this.init();\n  }\n\n  init() {\n    const time = this.convertMs(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const startTime = Date.now();\n    this.isActive = true;\n\n    this.intervalID = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.convertMs(deltaTime);\n      this.onTick(time);\n      //   console.log(time);\n    }, 1000);\n  }\n  //   refs.startBtn.setAttribute('disabled', 'disabled');\n  stop() {\n    clearInterval(this.intervalID);\n    this.isActive = false;\n    const time = this.convertMs(0);\n    this.onTick(time);\n  }\n\n  convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = String(Math.floor(ms / day)).padStart(3, '0');\n    // Remaining hours\n    const hours = this.addLeadingZero(Math.floor((ms % day) / hour));\n    // Remaining minutes\n    const minutes = this.addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n    // Remaining seconds\n    const seconds = this.addLeadingZero(Math.floor((((ms % day) % hour) % minute) / second));\n\n    return { days, hours, minutes, seconds };\n  }\n\n  addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new CountdownTimer({\n  onTick: updateClockface,\n});\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nfunction updateClockface({ days, hours, minutes, seconds }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.minutes.textContent = `${minutes}`;\n  refs.seconds.textContent = `${seconds}`;\n}\n\n//варіант 2\n// const refs = {\n//   startBtn: document.querySelector('button[data-start]'),\n//   days: document.querySelector('[data-days]'),\n//   hours: document.querySelector('[data-hours]'),\n//   minutes: document.querySelector('[data-minutes]'),\n//   seconds: document.querySelector('[data-seconds]'),\n// };\n// const timer = {\n//   intervalID: null,\n//   isActive: false,\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n//     const startTime = Date.now();\n//     this.isActive = true;\n//     //   refs.startBtn.setAttribute('disabled', 'disabled');\n\n//     this.intervalID = setInterval(() => {\n//       const currentTime = Date.now();\n//       const deltaTime = currentTime - startTime;\n//       //   console.log(currentTime);\n//       const time = convertMs(deltaTime);\n//       updateClockface(time);\n//       console.log(time);\n//     }, 1000);\n//   },\n//   stop() {\n//     clearInterval(this.intervalID);\n//     this.isActive = false;\n//   },\n// };\n\n// // timer.start();\n// refs.startBtn.addEventListener('click', onTimerStart);\n// function onTimerStart() {\n//   timer.start();\n// }\n\n// function convertMs(ms) {\n//   // Number of milliseconds per unit of time\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   // Remaining days\n//   const days = String(Math.floor(ms / day)).padStart(3, '0');\n//   // Remaining hours\n//   const hours = addLeadingZero(Math.floor((ms % day) / hour));\n//   // Remaining minutes\n//   const minutes = addLeadingZero(Math.floor(((ms % day) % hour) / minute));\n//   // Remaining seconds\n//   const seconds = addLeadingZero(Math.floor((((ms % day) % hour) % minute) / second));\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n// function updateClockface({ days, hours, minutes, seconds }) {\n//   refs.days.textContent = `${days}`;\n//   refs.hours.textContent = `${hours}`;\n//   refs.minutes.textContent = `${minutes}`;\n//   refs.seconds.textContent = `${seconds}`;\n// }\n"]}