{"version":3,"sources":["js/03-promises.js"],"names":["formRef","document","querySelector","formData","onSubmit","e","preventDefault","elements","delay","step","amount","currentTarget","delayStep","Number","value","firstDelay","getPosition","map","el","createPromise","arrayOfPositions","i","push","position","promise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","result","console","log","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAUC,SAASC,cAAc,SACjCC,EAAW,GAGjB,SAASC,EAASC,GAChBA,EAAEC,iBAEI,MACJC,UAAU,MAAEC,EAAF,KAASC,EAAT,OAAeC,IACvBL,EAAEM,cAEFC,IAAAA,EAAYC,OAAOJ,EAAKK,OACxBC,EAAaF,OAAOL,EAAMM,OAG9BE,EAFqBH,OAAOH,EAAOI,QAEPG,IAAIC,IAC9BC,EAAcD,EAAIH,GACVA,GAAcH,IAI1B,SAASI,EAAYN,GACfU,IAAAA,EAAmB,GAClB,IAAA,IAAIC,EAAI,EAAGA,GAAKX,EAAQW,IAC3BD,EAAiBE,KAAKD,GAGjBD,OAAAA,EAGT,SAASD,EAAcI,EAAUf,GACzBgB,MAAAA,EAAU,IAAIC,QAAQ,CAACC,EAASC,KAC9BC,MAAAA,EAAgBC,KAAKC,SAAW,GAEtCC,WAAW,KACLH,GACFF,EAAQ,CAAEH,SAAAA,EAAUf,MAAAA,IAEtBmB,EAAO,CAAEJ,SAAAA,EAAUf,MAAAA,KAClBA,KAUEgB,OAPPA,EACGQ,KAAKC,IACJC,QAAQC,2BAA2BF,EAAOV,eAAeU,EAAOzB,aAEjE4B,MAAM,EAAGb,SAAAA,EAAUf,MAAAA,MAClB0B,QAAQC,0BAA0BZ,QAAef,SAE9CgB,EA/CTxB,EAAQqC,iBAAiB,SAAUjC","file":"03-promises.dc46af77.js","sourceRoot":"../src","sourcesContent":["const formRef = document.querySelector('.form');\nconst formData = {};\nformRef.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  let delayStep = Number(step.value);\n  let firstDelay = Number(delay.value);\n  let promisesAmount = Number(amount.value);\n\n  getPosition(promisesAmount).map(el => {\n    createPromise(el, firstDelay);\n    return (firstDelay += delayStep);\n  });\n}\n\nfunction getPosition(amount) {\n  let arrayOfPositions = [];\n  for (let i = 1; i <= amount; i++) {\n    arrayOfPositions.push(i);\n  }\n\n  return arrayOfPositions;\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n\n  promise\n    .then(result => {\n      console.log(`✅ Fulfilled promise ${result.position} in ${result.delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n  return promise;\n}\n"]}